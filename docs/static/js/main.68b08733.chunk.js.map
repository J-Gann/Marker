{"version":3,"sources":["components/canvas/CanvasControl.js","components/canvas/Canvas.js","components/editor/LoadFiles.js","components/editor/MarkerEntry.js","components/editor/FileEntry.js","components/editor/DisplayFiles.js","components/editor/Editor.js","App.js","reportWebVitals.js","index.js"],"names":["CanvasControl","onNextImageIndex","imagesLength","useState","imageIndex","setImageIndex","play","setPlay","repeat","setRepeat","useEffect","intervalID","window","setInterval","oldIndex","clearInterval","className","onClick","currentIndex","oldRepeat","Canvas","scale","width","offsetX","offsetY","height","images","markers","setMarker","size","setSize","canvasContainer","useRef","currentImage","setCurrentImage","img","scaleWidth","scaleHeight","current","clientWidth","clientHeight","handleResize","addEventListener","removeEventListener","renderMarkers","index","radius","color","draggable","name","map","id","x","y","fill","onDragEnd","e","target","ref","image","renderImage","indices","cnt","push","idx","renderMarkerHistory","currentMarkers","Object","keys","key","points","currentMarker","console","log","stroke","strokeWidth","renderMarkerLineHistory","renderMarkerFuture","renderMarkerLineFuture","length","LoadFiles","handleNewImages","handleNewMarkers","readFileAsyncURL","file","Promise","resolve","reject","reader","FileReader","onload","result","onerror","readAsDataURL","readFileAsyncText","readAsText","handleLoadImages","files","a","awaitList","nameList","i","all","urlList","imageList","Image","src","forEach","sort","handleLoadMarkers","JSON","parse","type","multiple","accept","onInput","filename","text","element","document","createElement","setAttribute","encodeURIComponent","style","display","body","appendChild","click","removeChild","download","stringify","MarkerEntry","marker","toString","FileEntry","details","setDetails","oldDetails","DisplayFiles","Editor","App","setImages","setMarkers","Navbar","bg","variant","Brand","imageName","markerID","newImages","newMarkers","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.68b08733.chunk.js","sourcesContent":["import { useEffect, useRef, useState } from \"react\";\n\nimport \"./CanvasControl.css\";\n\nconst CanvasControl = ({ onNextImageIndex, imagesLength }) => {\n  const [imageIndex, setImageIndex] = useState(0);\n  const [play, setPlay] = useState(false);\n  const [repeat, setRepeat] = useState(true);\n\n  useEffect(() => {\n    const intervalID = window.setInterval(() => {\n      if (imagesLength) {\n        if (play && imagesLength - 1 > imageIndex) {\n          setImageIndex((oldIndex) => oldIndex + 1);\n        } else if (imagesLength - 1 === imageIndex && repeat) {\n          setImageIndex(() => 0);\n        }\n      }\n    }, 50);\n    return () => window.clearInterval(intervalID);\n  });\n\n  useEffect(() => onNextImageIndex(imageIndex), [imageIndex]);\n\n  return (\n    <div className=\"canvas-control\">\n      <div className=\"current-image\">\n        Current Image: <b>{imageIndex}</b>\n      </div>\n      <div>\n        <button\n          onClick={() => {\n            setPlay(false);\n            setImageIndex((currentIndex) =>\n              currentIndex !== 0 ? currentIndex - 1 : currentIndex\n            );\n          }}\n        >\n          Previous\n        </button>\n        <button\n          onClick={() => {\n            setPlay(false);\n            setImageIndex((currentIndex) =>\n              currentIndex !== imagesLength + 1\n                ? currentIndex + 1\n                : currentIndex\n            );\n          }}\n        >\n          Next\n        </button>\n\n        <button onClick={() => setPlay(true)}>Play</button>\n        <button onClick={() => setPlay(false)}>Pause</button>\n        <button onClick={() => setRepeat((oldRepeat) => !oldRepeat)}>\n          Toggle Repeat\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default CanvasControl;\n","import { useEffect, useRef, useState } from \"react\";\nimport { Stage, Layer, Circle, Image, Line } from \"react-konva\";\n\nimport \"./Canvas.css\";\nimport CanvasControl from \"./CanvasControl\";\n\nconst Canvas = ({ images, markers, setMarker }) => {\n  const [size, setSize] = useState({ width: 0, height: 0 });\n  const canvasContainer = useRef(null);\n  const [currentImage, setCurrentImage] = useState(0);\n\n  const img = images[currentImage];\n  let scale, width, offsetX, offsetY, height;\n\n  if (img) {\n    const scaleWidth = size.width / img.width;\n    const scaleHeight = size.height / img.height;\n    scale = scaleWidth < scaleHeight ? scaleWidth : scaleHeight;\n    width = img.width * scale;\n    offsetX = (size.width - width) / 2;\n    height = img.height * scale;\n    offsetY = (size.height - height) / 2;\n  }\n\n  // Create hook only once on first render\n  useEffect(() => {\n    // Set initial size of canvas\n    const { clientWidth, clientHeight } = canvasContainer.current;\n    const newSize = { width: clientWidth, height: clientHeight };\n    setSize(newSize);\n\n    // Resize canvas to new size on every rezise event\n    const handleResize = () => {\n      const { clientWidth, clientHeight } = canvasContainer.current;\n      const newSize = {\n        width: clientWidth,\n        height: clientHeight,\n      };\n      setSize(newSize);\n    };\n    window.addEventListener(\"resize\", handleResize);\n    return () => window.removeEventListener(\"resize\", handleResize);\n  }, []);\n\n  const onNextImageIndex = (index) => setCurrentImage(index);\n\n  const renderImage = (index) => {\n    if (images[index]) {\n      const img = images[index];\n      return (\n        <Image\n          x={0 + offsetX}\n          y={0 + offsetY}\n          width={width}\n          height={height}\n          image={img}\n        ></Image>\n      );\n    }\n  };\n\n  const renderMarkers = (index, radius, color, draggable) => {\n    if (images[index]) {\n      const img = images[index];\n      if (markers[img.name]) {\n        const currentMarkers = markers[img.name];\n        return currentMarkers.map(({ id, x, y }) => {\n          return (\n            <Circle\n              x={x * scale + offsetX}\n              y={y * scale + offsetY}\n              radius={radius * scale}\n              fill={color}\n              draggable={draggable}\n              onDragEnd={(e) =>\n                setMarker(\n                  img.name,\n                  id,\n                  e.target.x() / scale - offsetX,\n                  e.target.y() / scale - offsetY\n                )\n              }\n            ></Circle>\n          );\n        });\n      }\n    }\n  };\n\n  const renderMarkerHistory = (index, size, radius, color) => {\n    const indices = [];\n    for (let cnt = index - size; cnt < index; cnt++) indices.push(cnt);\n    return indices.map((idx) => {\n      return renderMarkers(idx, radius, color);\n    });\n  };\n\n  const renderMarkerLineHistory = (index, size, color) => {\n    if (images[currentImage]) {\n      const img = images[currentImage];\n      const currentMarkers = markers[img.name];\n      if (currentMarkers) {\n        const markerKeys = Object.keys(currentMarkers);\n        return markerKeys.map((key) => {\n          if (key !== \"id\") {\n            let points = [];\n            for (let cnt = index - size; cnt < index; cnt++) {\n              if (images[cnt]) {\n                const img = images[cnt];\n                const currentMarkers = markers[img.name];\n                const currentMarker = currentMarkers[key];\n                points.push(currentMarker[\"x\"] * scale + offsetX);\n                points.push(currentMarker[\"y\"] * scale + offsetY);\n              }\n            }\n            console.log(points);\n            return <Line points={points} stroke={color} strokeWidth={4}></Line>;\n          }\n        });\n      }\n    }\n  };\n\n  const renderMarkerLineFuture = (index, size, color) => {\n    if (images[currentImage]) {\n      const img = images[currentImage];\n      const currentMarkers = markers[img.name];\n      if (currentMarkers) {\n        const markerKeys = Object.keys(currentMarkers);\n        return markerKeys.map((key) => {\n          if (key !== \"id\") {\n            let points = [];\n            for (let cnt = index + 1; cnt < index + size + 1; cnt++) {\n              if (images[cnt]) {\n                const img = images[cnt];\n                const currentMarkers = markers[img.name];\n                const currentMarker = currentMarkers[key];\n                points.push(currentMarker[\"x\"] * scale + offsetX);\n                points.push(currentMarker[\"y\"] * scale + offsetY);\n              }\n            }\n            console.log(points);\n            return <Line points={points} stroke={color} strokeWidth={4}></Line>;\n          }\n        });\n      }\n    }\n  };\n\n  const renderMarkerFuture = (index, size, radius, color) => {\n    const indices = [];\n    for (let cnt = index + 1; cnt < index + size + 1; cnt++) indices.push(cnt);\n    return indices.map((idx) => {\n      return renderMarkers(idx, radius, color);\n    });\n  };\n\n  return (\n    <div className=\"canvas\">\n      <div ref={canvasContainer} className=\"canvas-container\">\n        <Stage className=\"canvas\" width={size.width} height={size.height}>\n          <Layer>\n            {renderImage(currentImage)}\n            {renderMarkers(currentImage, 10, \"red\", true)}\n            {renderMarkerHistory(currentImage, 10, 4, \"green\", false)}\n            {renderMarkerLineHistory(currentImage, 10, \"green\")}\n            {renderMarkerFuture(currentImage, 10, 4, \"blue\", false)}\n            {renderMarkerLineFuture(currentImage, 10, \"blue\")}\n          </Layer>\n        </Stage>\n      </div>\n      <div>\n        <CanvasControl\n          onNextImageIndex={onNextImageIndex}\n          imagesLength={images.length}\n        ></CanvasControl>\n      </div>\n    </div>\n  );\n};\n\nexport default Canvas;\n","import Form from \"react-bootstrap/Form\";\nimport \"./LoadFiles.css\";\n\nconst LoadFiles = ({ handleNewImages, handleNewMarkers, markers }) => {\n  const readFileAsyncURL = (file) => {\n    return new Promise((resolve, reject) => {\n      let reader = new FileReader();\n      reader.onload = () => {\n        resolve(reader.result);\n      };\n      reader.onerror = reject;\n      reader.readAsDataURL(file);\n    });\n  };\n\n  const readFileAsyncText = (file) => {\n    return new Promise((resolve, reject) => {\n      let reader = new FileReader();\n      reader.onload = () => {\n        resolve(reader.result);\n      };\n      reader.onerror = reject;\n      reader.readAsText(file);\n    });\n  };\n\n  const handleLoadImages = async (files) => {\n    let awaitList = [];\n    let nameList = [];\n    for (var i = 0; i < files.length; i++) {\n      awaitList.push(readFileAsyncURL(files[i]));\n      nameList.push(files[i].name);\n    }\n    const urlList = await Promise.all(awaitList);\n    awaitList = [];\n    const imageList = [];\n    for (var e = 0; e < urlList.length; e++) {\n      let image = new Image();\n      imageList.push(image);\n      awaitList.push(\n        new Promise((resolve, reject) => {\n          image.onload = () => resolve();\n        })\n      );\n      image.src = urlList[e];\n    }\n    await Promise.all(awaitList);\n    imageList.forEach((image, index) => {\n      imageList[index].name = nameList[index];\n    });\n    imageList.sort();\n    handleNewImages(imageList);\n  };\n\n  const handleLoadMarkers = async (file) => {\n    const markers = await readFileAsyncText(file[0]);\n    handleNewMarkers(JSON.parse(markers));\n  };\n\n  const download = (filename, text) => {\n    var element = document.createElement(\"a\");\n    element.setAttribute(\n      \"href\",\n      \"data:text/plain;charset=utf-8,\" + encodeURIComponent(text)\n    );\n    element.setAttribute(\"download\", filename);\n\n    element.style.display = \"none\";\n    document.body.appendChild(element);\n\n    element.click();\n\n    document.body.removeChild(element);\n  };\n\n  return (\n    <div>\n      <h3>Files</h3>\n      <div className=\"load-files\">\n        <label>Load Images</label>\n        <input\n          type=\"file\"\n          multiple\n          accept=\"image/png, image/jpeg\"\n          onInput={(e) => handleLoadImages(e.target.files)}\n        />\n        <label>Load Marker</label>\n        <input\n          type=\"file\"\n          accept=\"json\"\n          onInput={(e) => handleLoadMarkers(e.target.files)}\n        />\n        <button\n          onClick={() => download(\"markers.json\", JSON.stringify(markers))}\n        >\n          Download Markers as File\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default LoadFiles;\n","import \"./MarkerEntry.css\";\n\nconst MarkerEntry = ({ marker, image }) => {\n  const keys = Object.keys(marker);\n  return (\n    <div className=\"marker-entries\">\n      {keys.map((key, index) => {\n        return <p>{key.toString() + \":\" + marker[key].toString() + \" \"}</p>;\n      })}\n    </div>\n  );\n};\n\nexport default MarkerEntry;\n","import \"./FileEntry.css\";\nimport { useState } from \"react\";\nimport MarkerEntry from \"./MarkerEntry\";\n\nconst FileEntry = ({ image, markers, index }) => {\n  const [details, setDetails] = useState(false);\n\n  return (\n    <div className=\"file-entry\">\n      <p>{\"[\" + index + \"] IMG: \" + image.name}</p>\n      {markers[image.name] && (\n        <button onClick={() => setDetails((oldDetails) => !oldDetails)}>\n          {details ? \"Hide Marker\" : \"Show Marker\"}\n        </button>\n      )}\n\n      {details &&\n        markers[image.name] &&\n        markers[image.name].map((marker, index) => (\n          <MarkerEntry key={index} marker={marker}></MarkerEntry>\n        ))}\n    </div>\n  );\n};\n\nexport default FileEntry;\n","import \"./DisplayFiles.css\";\nimport FileEntry from \"./FileEntry\";\n\nconst DisplayFiles = ({ images, markers }) => {\n  console.log(images);\n  return (\n    <>\n      <h3>Images</h3>\n      <div className=\"display-files\">\n        {images.map((image, index) => (\n          <FileEntry\n            key={index}\n            index={index}\n            image={image}\n            markers={markers}\n          ></FileEntry>\n        ))}\n      </div>\n    </>\n  );\n};\n\nexport default DisplayFiles;\n","import \"./Editor.css\";\nimport LoadFiles from \"./LoadFiles\";\nimport DisplayFiles from \"./DisplayFiles\";\n\nconst Editor = ({ handleNewImages, handleNewMarkers, images, markers }) => {\n  return (\n    <div className=\"editor\">\n      <div className=\"editor-load\">\n        <LoadFiles\n          handleNewImages={handleNewImages}\n          handleNewMarkers={handleNewMarkers}\n          markers={markers}\n        ></LoadFiles>\n      </div>\n      <div className=\"editor-display\">\n        <DisplayFiles images={images} markers={markers}></DisplayFiles>\n      </div>\n    </div>\n  );\n};\n\nexport default Editor;\n","import \"./App.css\";\n\nimport Navbar from \"react-bootstrap/Navbar\";\nimport { useState } from \"react\";\nimport Canvas from \"./components/canvas/Canvas\";\nimport Editor from \"./components/editor/Editor\";\n\nfunction App() {\n  const [images, setImages] = useState([]);\n  const [markers, setMarkers] = useState({});\n\n  const handleNewImages = (newImages) => setImages(newImages);\n  const handleNewMarkers = (newMarkers) => setMarkers(newMarkers);\n\n  const setMarker = (imageName, markerID, x, y) => {\n    markers[imageName].forEach((marker) => {\n      if (marker.id === markerID) {\n        marker.x = x;\n        marker.y = y;\n      }\n    });\n  };\n\n  return (\n    <>\n      <div id=\"app-navigation\">\n        <Navbar bg=\"dark\" variant=\"dark\">\n          <Navbar.Brand>Marker Visualization</Navbar.Brand>\n        </Navbar>\n      </div>\n      <div id=\"app-container\">\n        <Canvas\n          images={images}\n          markers={markers}\n          setMarker={setMarker}\n        ></Canvas>\n        <Editor\n          handleNewImages={handleNewImages}\n          images={images}\n          handleNewMarkers={handleNewMarkers}\n          markers={markers}\n        ></Editor>\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import \"bootstrap/dist/css/bootstrap.min.css\";\n\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}